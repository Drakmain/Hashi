var search_data = {"index":{"searchIndex":["case","catalogue","chrono","contrelamontre","coup","donnees","element","fenetre","genie","ile","jeu","jeututoriel","menuprincipal","normal","options","plateau","plateaucorrection","pont","rubyapp","selectiondifficulte","selectionmap","selectionmode","adeuxsens()","activerautocorrecteur()","activerhypothese()","activerhypothese()","actualiseraffichage()","actualiserpontajoutables()","affiche()","affichercorrection()","affichererreur()","affichererreurs()","afficherjeu()","afficherplateau()","afficherponterreur()","afficher_ile_pleine()","afficher_pont()","ajoutepont()","ajouterpont()","ajouterpont()","ajouterpontbas()","ajouterpontdroite()","annuler()","annuler()","calculscore()","changer_image()","charger()","corrigererreur()","corrigererreur()","create_imgs()","creer()","creer()","creer()","creer()","creer()","creer()","creer()","creer()","creer()","creer()","creerpont()","creerpontdefaut()","deletecoup()","desactiverautocorrecteur()","desactiverhypothese()","desactiverhypothese()","deuxsens()","enlevepont()","enlevepont()","enlevererreur()","enleverpont()","enleverpontsens()","estajout?()","estelement?()","estelement?()","estelement?()","estenleve?()","estentoure()","estfini?()","esthorizontal()","esthorizontal?()","esthorizontal?()","estile?()","estile?()","estpont?()","estpont?()","estvertical()","estvertical?()","estvertical?()","generatematrice()","generatematrice()","generateplateau()","generateplateau()","getcase()","getcoup()","getmatrice()","ilefini?()","initialiserjeu()","jouercoup()","jouercouphorizontaleinterface()","jouercoupinterface()","jouercoupverticaleinterface()","jouer_afficher_pont()","lancerchrono()","lancerchrono()","lancerchrono()","lancerchrono()","lancerchronoinverse()","lancerchronovaleur()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nombreerreurs()","on_afficher_erreur_button_clicked()","on_annuler_button_clicked()","on_autocorrecteur_switch_state_set()","on_catalogue_clicked()","on_classement_clicked()","on_contre_la_montre_clicked()","on_corriger_erreur_button_clicked()","on_difficile_clicked()","on_enregistre_button_clicked()","on_facile_clicked()","on_fini_dialog_response()","on_fini_dialog_response()","on_génie_clicked()","on_horizontal_button_clicked()","on_hypothese_switch_state_set()","on_jouer_button_clicked()","on_jouer_clicked()","on_langue_comboboxtext_changed()","on_menu_principal_button_clicked()","on_menu_principal_button_clicked()","on_moyen_clicked()","on_nb_erreur_button_clicked()","on_nom_utilisateur_entry_changed()","on_normal_clicked()","on_options_clicked()","on_pause_button_clicked()","on_quitter_clicked()","on_recommencer_button_clicked()","on_recommencer_button_clicked()","on_refaire_button_clicked()","on_resolution_comboboxtext_changed()","on_retour_button_clicked()","on_retour_button_clicked()","on_retour_button_clicked()","on_retour_button_clicked()","on_retour_button_clicked()","on_retour_button_clicked()","on_retour_button_clicked()","on_selection_button_clicked()","on_selection_button_clicked()","on_suggerer_un_coup_button_clicked()","on_suivant_button_clicked()","on_tutoriel_clicked()","on_vertical_button_clicked()","partiefini?()","pontajoutable()","pontajoutables()","put_img()","refaire()","refaire()","sauvegarder()","set_sens()","stopperchrono()","suggestion()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","verifcoord()","verifcoord()","voisinebas()","voisinedroite()","voisinegauche()","voisinehaut()"],"longSearchIndex":["case","catalogue","chrono","contrelamontre","coup","donnees","element","fenetre","genie","ile","jeu","jeututoriel","menuprincipal","normal","options","plateau","plateaucorrection","pont","rubyapp","selectiondifficulte","selectionmap","selectionmode","pont#adeuxsens()","contrelamontre#activerautocorrecteur()","contrelamontre#activerhypothese()","genie#activerhypothese()","rubyapp#actualiseraffichage()","rubyapp#actualiserpontajoutables()","plateau#affiche()","genie#affichercorrection()","rubyapp#affichererreur()","contrelamontre#affichererreurs()","plateau#afficherjeu()","genie#afficherplateau()","contrelamontre#afficherponterreur()","rubyapp#afficher_ile_pleine()","rubyapp#afficher_pont()","pont#ajoutepont()","ile#ajouterpont()","plateau#ajouterpont()","case#ajouterpontbas()","case#ajouterpontdroite()","genie#annuler()","rubyapp#annuler()","genie#calculscore()","rubyapp#changer_image()","genie#charger()","contrelamontre#corrigererreur()","rubyapp#corrigererreur()","rubyapp#create_imgs()","case::creer()","contrelamontre::creer()","coup::creer()","element::creer()","genie::creer()","ile::creer()","normal::creer()","plateau::creer()","plateaucorrection::creer()","pont::creer()","case#creerpont()","case#creerpontdefaut()","genie#deletecoup()","contrelamontre#desactiverautocorrecteur()","contrelamontre#desactiverhypothese()","genie#desactiverhypothese()","pont#deuxsens()","ile#enlevepont()","pont#enlevepont()","contrelamontre#enlevererreur()","case#enleverpont()","case#enleverpontsens()","coup#estajout?()","element#estelement?()","ile#estelement?()","pont#estelement?()","coup#estenleve?()","case#estentoure()","ile#estfini?()","pont#esthorizontal()","coup#esthorizontal?()","pont#esthorizontal?()","element#estile?()","ile#estile?()","element#estpont?()","pont#estpont?()","pont#estvertical()","coup#estvertical?()","pont#estvertical?()","plateau#generatematrice()","plateaucorrection#generatematrice()","plateau#generateplateau()","plateaucorrection#generateplateau()","plateau#getcase()","genie#getcoup()","donnees#getmatrice()","case#ilefini?()","genie#initialiserjeu()","genie#jouercoup()","genie#jouercouphorizontaleinterface()","genie#jouercoupinterface()","genie#jouercoupverticaleinterface()","rubyapp#jouer_afficher_pont()","chrono#lancerchrono()","contrelamontre#lancerchrono()","genie#lancerchrono()","normal#lancerchrono()","chrono#lancerchronoinverse()","chrono#lancerchronovaleur()","case::new()","catalogue::new()","chrono::new()","contrelamontre::new()","coup::new()","donnees::new()","fenetre::new()","genie::new()","ile::new()","jeu::new()","jeututoriel::new()","menuprincipal::new()","options::new()","plateau::new()","pont::new()","rubyapp::new()","selectiondifficulte::new()","selectionmap::new()","selectionmode::new()","contrelamontre#nombreerreurs()","jeu#on_afficher_erreur_button_clicked()","jeu#on_annuler_button_clicked()","jeu#on_autocorrecteur_switch_state_set()","menuprincipal#on_catalogue_clicked()","menuprincipal#on_classement_clicked()","selectionmode#on_contre_la_montre_clicked()","jeu#on_corriger_erreur_button_clicked()","selectiondifficulte#on_difficile_clicked()","options#on_enregistre_button_clicked()","selectiondifficulte#on_facile_clicked()","jeu#on_fini_dialog_response()","jeututoriel#on_fini_dialog_response()","selectionmode#on_génie_clicked()","jeu#on_horizontal_button_clicked()","jeu#on_hypothese_switch_state_set()","selectionmap#on_jouer_button_clicked()","menuprincipal#on_jouer_clicked()","options#on_langue_comboboxtext_changed()","jeu#on_menu_principal_button_clicked()","jeututoriel#on_menu_principal_button_clicked()","selectiondifficulte#on_moyen_clicked()","jeu#on_nb_erreur_button_clicked()","options#on_nom_utilisateur_entry_changed()","selectionmode#on_normal_clicked()","menuprincipal#on_options_clicked()","jeu#on_pause_button_clicked()","menuprincipal#on_quitter_clicked()","jeu#on_recommencer_button_clicked()","selectionmap#on_recommencer_button_clicked()","jeu#on_refaire_button_clicked()","options#on_resolution_comboboxtext_changed()","catalogue#on_retour_button_clicked()","jeu#on_retour_button_clicked()","jeututoriel#on_retour_button_clicked()","options#on_retour_button_clicked()","selectiondifficulte#on_retour_button_clicked()","selectionmap#on_retour_button_clicked()","selectionmode#on_retour_button_clicked()","jeu#on_selection_button_clicked()","jeututoriel#on_selection_button_clicked()","jeu#on_suggerer_un_coup_button_clicked()","jeututoriel#on_suivant_button_clicked()","selectionmode#on_tutoriel_clicked()","jeu#on_vertical_button_clicked()","plateau#partiefini?()","case#pontajoutable()","case#pontajoutables()","rubyapp#put_img()","genie#refaire()","rubyapp#refaire()","genie#sauvegarder()","rubyapp#set_sens()","chrono#stopperchrono()","contrelamontre#suggestion()","case#to_s()","coup#to_s()","donnees#to_s()","element#to_s()","genie#to_s()","ile#to_s()","options#to_s()","plateau#to_s()","pont#to_s()","genie#verifcoord()","plateau#verifcoord()","case#voisinebas()","case#voisinedroite()","case#voisinegauche()","case#voisinehaut()"],"info":[["Case","","Case.html","","<p>La classe Case représente un élément du plateau, elle peut être soit une île, soit un pont, soit un élément. …\n"],["Catalogue","","Catalogue.html","","<p>La classe Catalogue permet d&#39;afficher la fenêtre contenant toutes les règles et toutes les techniques. …\n"],["Chrono","","Chrono.html","","<p>La classe Chrono permet de lancer deux types de chronomètres :\n<p>Un premier chronomètre qui compte le nombre …\n"],["ContreLaMontre","","ContreLaMontre.html","","<p>La classe ContreLaMontre permet de lancer un niveau, en plus d&#39;un chronomètre qui, une fois arrivé …\n"],["Coup","","Coup.html","","<p>La classe Coup permet de sauvegarder les coups pour pouvoir faire les undo ou les redo.\n<p>On peut créer …\n"],["Donnees","","Donnees.html","","<p>La classe Donnee créée la matrice du jeu à partir d&#39;un fichier donnée.\n<p>Elle est capable :\n<p>De charger …\n"],["Element","","Element.html","","<p>La classe Element représente un élément du plateau. Elle est la classe mère de Pont et Ile. Une case …\n"],["Fenetre","","Fenetre.html","","<p>La classe Fenetre.…\n<p>Variables d&#39;instance\n<p>@fichier_options =&gt; \n"],["Genie","","Genie.html","","<p>La classe Genie représente le mode génie, c&#39;est le mode le plus “simple” dans le sens où …\n"],["Ile","","Ile.html","","<p>La classe Ile représente une île sur le plateau, elle hérite de Element\n<p>Elle peut : \n<p>Dire qu&#39;elle est …\n"],["Jeu","","Jeu.html","","<p>La classe Jeu.…\n<p>Variables d&#39;instance\n<p>@ratio =&gt; \n"],["JeuTutoriel","","JeuTutoriel.html","","<p>La classe JeuTutoriel .…\n<p>Variables d&#39;instance\n<p>@ratio =&gt; \n"],["MenuPrincipal","","MenuPrincipal.html","","<p>La Classe MenuPrincipal permet d&#39;afficher la fenêtre du menu principal.\n<p>Le menu est composé de 5 choix …\n"],["Normal","","Normal.html","","<p>La classe Normal est une sous-classe de la classe ContreLaMontre, elle possède les mêmes caractèristiques. …\n"],["Options","","Options.html","","<p>La Classe Options permet d&#39;afficher la fenêtre d&#39;option.\n<p>Il y a trois personnalisation d&#39;options …\n"],["Plateau","","Plateau.html","","<p>La classe Plateau représente les Case du jeu, le plateau a une taille défini dans le fichier\n<p>Elle est …\n"],["PlateauCorrection","","PlateauCorrection.html","","<p>La classe PlateauCorrection représente un Plateau corrigé, elle hérite de Plateau\n<p>Elle est capable de …\n"],["Pont","","Pont.html","","<p>La classe Pont représente un pont sur le plateau, elle hérite de Element Un Pont est un Element contenu …\n"],["RubyApp","","RubyApp.html","",""],["SelectionDifficulte","","SelectionDifficulte.html","",""],["SelectionMap","","SelectionMap.html","",""],["SelectionMode","","SelectionMode.html","",""],["aDeuxSens","Pont","Pont.html#method-i-aDeuxSens","()","<p>Méthode qui vérifie si le pont a deux sens possible\n<p>Retourne\n<p>true si le pont a deux sens, false sinon\n"],["activerAutoCorrecteur","ContreLaMontre","ContreLaMontre.html#method-i-activerAutoCorrecteur","()","<p>permet d&#39;activer le mode AutoCorrecteur\n"],["activerHypothese","ContreLaMontre","ContreLaMontre.html#method-i-activerHypothese","()","<p>permet d&#39;activer le mode hypothèse\n"],["activerHypothese","Genie","Genie.html#method-i-activerHypothese","()",""],["actualiserAffichage","RubyApp","RubyApp.html#method-i-actualiserAffichage","()",""],["actualiserPontAjoutables","RubyApp","RubyApp.html#method-i-actualiserPontAjoutables","(caseCourante, unX, unY, unBool)",""],["affiche","Plateau","Plateau.html#method-i-affiche","()","<p>Méthode de débogage qui permet d&#39;afficher la matrice une fois que les éléments ont été initialisé …\n"],["afficherCorrection","Genie","Genie.html#method-i-afficherCorrection","()","<p>Méthode qui affiche le plateau de correction sur le terminal\n"],["afficherErreur","RubyApp","RubyApp.html#method-i-afficherErreur","()",""],["afficherErreurs","ContreLaMontre","ContreLaMontre.html#method-i-afficherErreurs","()","<p>affiche le nombre d&#39;erreurs, puis, demande au joueur si il veut afficher ses erreurs, ou les supprimer …\n"],["afficherJeu","Plateau","Plateau.html#method-i-afficherJeu","()","<p>Méthode de débogage qui permet d&#39;afficher un plateau de jeu en terminal\n<p>. : ponts possibles\n<p><p>: pont …\n"],["afficherPlateau","Genie","Genie.html#method-i-afficherPlateau","()","<p>Méthode qui affiche le plateau sur le terminal\n"],["afficherPontErreur","ContreLaMontre","ContreLaMontre.html#method-i-afficherPontErreur","()","<p>permet de mettre en surbrillance les erreurs sur les ponts mal placés\n"],["afficher_ile_pleine","RubyApp","RubyApp.html#method-i-afficher_ile_pleine","(x, y)",""],["afficher_pont","RubyApp","RubyApp.html#method-i-afficher_pont","(sens, x, y)",""],["ajoutePont","Pont","Pont.html#method-i-ajoutePont","()","<p>Méthode qui permet d&#39;ajouter un pont (s&#39;active lorsque l&#39;utilisateur fait un clic droit) …\n"],["ajouterPont","Ile","Ile.html#method-i-ajouterPont","()","<p>Méthode qui incrémente de 1 @nbLiens et vérifie si l&#39;île est fini\n"],["ajouterPont","Plateau","Plateau.html#method-i-ajouterPont","()","<p>Méthode qui permet d&#39;ajouter des ponts là ou le joueur pourra en créer\n"],["ajouterPontBas","Case","Case.html#method-i-ajouterPontBas","()","<p>Methode qui permet d&#39;ajouter des pont en bas de la case appelante\n<p>La case vérifie :\n<p>Si elle a un île …\n"],["ajouterPontDroite","Case","Case.html#method-i-ajouterPontDroite","()","<p>Methode qui permet d&#39;ajouter des ponts à droite de la case appelante\n<p>La case vérifie :\n<p>Si elle a une …\n"],["annuler","Genie","Genie.html#method-i-annuler","()","<p>Méthode qui permet d&#39;enlever le dernier coup\n"],["annuler","RubyApp","RubyApp.html#method-i-annuler","()",""],["calculScore","Genie","Genie.html#method-i-calculScore","()","<p>Méthode qui permet de calculer le score du joueur\n"],["changer_image","RubyApp","RubyApp.html#method-i-changer_image","(nb_ponts, sens, x, y)",""],["charger","Genie","Genie.html#method-i-charger","(mode)","<p>Méthode qui permet de charger une partie, elle désérialize le fichier demandé\n"],["corrigerErreur","ContreLaMontre","ContreLaMontre.html#method-i-corrigerErreur","()","<p>Permet de corriger des erreurs lit dans le fichier passé en parametre.\n"],["corrigerErreur","RubyApp","RubyApp.html#method-i-corrigerErreur","()",""],["create_imgs","RubyApp","RubyApp.html#method-i-create_imgs","()",""],["creer","Case","Case.html#method-c-creer","(unX, unY, unPlateau, unElem)","<p>Methode qui permet de créer une case\n<p>Attributs\n<p><code>unX</code> - coordonées x de la case\n"],["creer","ContreLaMontre","ContreLaMontre.html#method-c-creer","(unPlateau, unNiveau, unPseudo, uneDifficulte)","<p>creer un objet ContreLaMontre\n<p>Attributs\n<p><code>unPlateau</code> : une référence vers le plateau de jeu de la partie courante …\n"],["creer","Coup","Coup.html#method-c-creer","(typeCoup, pont, sens)","<p>Méthode qui permet de créer un nouveau coup\n<p>Attributs\n<p><code>typeCoup</code> : le type de coup réaliser par le joueur …\n"],["creer","Element","Element.html#method-c-creer","()","<p>Méthode qui créer un nouvel élément\n"],["creer","Genie","Genie.html#method-c-creer","(unPlateau, unNiveau, unPseudo, uneDifficulte)","<p>Méthode qui permet de créer un mode génie\n<p>Attributs\n<p><code>unPlateau</code> : une référence vers le plateau de jeu de …\n"],["creer","Ile","Ile.html#method-c-creer","(uneValeur)","<p>Méthode qui permet de créer une ile\n<p>Attributs\n<p><code>uneValeur</code> - la valeur de l&#39;île (un entier)\n"],["creer","Normal","Normal.html#method-c-creer","(unPlateau, unNiveau, unPseudo, uneDifficulte)","<p>Méthode qui permet de créer un mode normal.\n<p>Attributs\n<p><code>unPlateau</code> : une référence vers le plateau de jeu …\n"],["creer","Plateau","Plateau.html#method-c-creer","()","<p>Méthode qui permet de créer un plateau\n"],["creer","PlateauCorrection","PlateauCorrection.html#method-c-creer","()","<p>la method new est en privé\n"],["creer","Pont","Pont.html#method-c-creer","(unSens, uneValeur = 0)","<p>Méthode qui permet de créer un pont\n<p>Attributs\n<p><code>unSens</code> - booléen vérifiant si le sens du pont est horizontal …\n"],["creerPont","Case","Case.html#method-i-creerPont","(unSens, unBool)","<p>Methode qui permet de créer tous les ponts entre 2 îles.\n<p>Attributs\n<p><code>unSens</code> - le sens dans lequel on veut …\n"],["creerPontDefaut","Case","Case.html#method-i-creerPontDefaut","()","<p>Methode qui permet de créer tous les ponts entre 2 îles, ces ponts ne peuvent que être vertical ou horizontal. …\n"],["deleteCoup","Genie","Genie.html#method-i-deleteCoup","()","<p>Méthode qui permet de supprimer le dernier coup dans la liste des coups, le met dans à liste des anciens …\n"],["desactiverAutoCorrecteur","ContreLaMontre","ContreLaMontre.html#method-i-desactiverAutoCorrecteur","()","<p>permet de desactiver le mode AutoCorrecteur et de supprimer tous les mauvais liens que l&#39;utilisateur …\n"],["desactiverHypothese","ContreLaMontre","ContreLaMontre.html#method-i-desactiverHypothese","()","<p>permet de desactiver le mode hypothèse et de supprimer tous les mauvais liens que l&#39;utilisateur à …\n"],["desactiverHypothese","Genie","Genie.html#method-i-desactiverHypothese","()",""],["deuxSens","Pont","Pont.html#method-i-deuxSens","()","<p>Méthode qui permet de d&#39;incrémenter le nombre de sens d&#39;un pont\n"],["enlevePont","Ile","Ile.html#method-i-enlevePont","()","<p>Méthode qui décrémente de 1 @nbLiens\n"],["enlevePont","Pont","Pont.html#method-i-enlevePont","()","<p>Méthode qui permet d&#39;enlever les ponts (mettre à 0)\n"],["enleverErreur","ContreLaMontre","ContreLaMontre.html#method-i-enleverErreur","(uneCase, unNombre)","<p>Permet de corriger des erreurs enlève des ponts en fonction d&#39;un nombre donné sur une case choisis. …\n"],["enleverPont","Case","Case.html#method-i-enleverPont","()","<p>Methode qui permet d&#39;enlever un pont\n"],["enleverPontSens","Case","Case.html#method-i-enleverPontSens","(unSens, unBool)","<p>Méthode qui permet d&#39;enlever un pont voisin, dans un sens donné\n<p>ATTRIBUTS\n<p><code>unSens</code> - La direction à vérifier …\n"],["estAjout?","Coup","Coup.html#method-i-estAjout-3F","()","<p>Méthode qui vérifie si type de coup est ajouter\n"],["estElement?","Element","Element.html#method-i-estElement-3F","()","<p>Méthode qui vérifie si l&#39;element est un élément\n<p>Retourne\n<p>true par défaut\n"],["estElement?","Ile","Ile.html#method-i-estElement-3F","()","<p>Méthode qui vérifie si l&#39;element est un élément\n<p>Retourne\n<p>false\n"],["estElement?","Pont","Pont.html#method-i-estElement-3F","()","<p>Méthode qui vérifie si l&#39;element est un élément\n<p>Retourne\n<p>false\n"],["estEnleve?","Coup","Coup.html#method-i-estEnleve-3F","()","<p>Méthode qui vérifie si type de coup est ajouter\n"],["estEntoure","Case","Case.html#method-i-estEntoure","()","<p>Methode qui permet de vérifier si la case peut être un pont horizontal et/ou vertical\n<p>Retourne\n<p>true si …\n"],["estFini?","Ile","Ile.html#method-i-estFini-3F","()","<p>Méthode qui vérifie si l&#39;île est finie\n<p>Retourne\n<p>true si l&#39;île est complétée, false sinon\n"],["estHorizontal","Pont","Pont.html#method-i-estHorizontal","()","<p>Méthode qui permet de dire que le pont est horizontale en modifiant le boolean\n"],["estHorizontal?","Coup","Coup.html#method-i-estHorizontal-3F","()","<p>Méthode qui vérifie si le sens du coup est horizontal\n"],["estHorizontal?","Pont","Pont.html#method-i-estHorizontal-3F","()","<p>Méthode qui vérifie si le sens est horizontal\n<p>Retourne\n<p>true si le sens est horizontal, false sinon\n"],["estIle?","Element","Element.html#method-i-estIle-3F","()","<p>Méthode qui vérifie si l&#39;element est une île\n<p>Retourne\n<p>false par défaut\n"],["estIle?","Ile","Ile.html#method-i-estIle-3F","()","<p>Méthode qui vérifie si c&#39;est une île\n<p>Retourne\n<p>true\n"],["estPont?","Element","Element.html#method-i-estPont-3F","()","<p>Méthode qui vérifie si l&#39;element est un pont\n<p>Retourne\n<p>false par défaut\n"],["estPont?","Pont","Pont.html#method-i-estPont-3F","()","<p>Méthode qui vérifie si c&#39;est un pont\n<p>Retourne\n<p>true\n"],["estVertical","Pont","Pont.html#method-i-estVertical","()","<p>Méthode qui permet de dire que le pont est horizontale en modifiant le boolean\n"],["estVertical?","Coup","Coup.html#method-i-estVertical-3F","()","<p>Méthode qui vérifie si le sens du coup est vertical\n"],["estVertical?","Pont","Pont.html#method-i-estVertical-3F","()","<p>Méthode qui vérifie si le sens est vertical\n<p>Retourne\n<p>true si le sens est vertical, false sinon\n"],["generateMatrice","Plateau","Plateau.html#method-i-generateMatrice","(file)","<p>Méthode qui génère la matrice à partir du fichier passé en parametre elle récupère la taille de la matrice, …\n"],["generateMatrice","PlateauCorrection","PlateauCorrection.html#method-i-generateMatrice","(file)","<p>Redéfinition de la méthode car le plateau de correction contient des “-”\n<p>Méthode qui génère …\n"],["generatePlateau","Plateau","Plateau.html#method-i-generatePlateau","()","<p>Méthode qui permet de générer le plateau (transformer les entiers en Elements et en Ile)\n"],["generatePlateau","PlateauCorrection","PlateauCorrection.html#method-i-generatePlateau","()","<p>Méthode qui permet de générer le plateau de correction (transformer les entiers en Ponts, en Elements …\n"],["getCase","Plateau","Plateau.html#method-i-getCase","(unX, unY)","<p>Méthode qui trouve une case dans la matrice\n<p>Attributs\n<p><code>unX</code> - coordonnée x de la case\n"],["getCoup","Genie","Genie.html#method-i-getCoup","()","<p>Méthode qui permet de récupérer l&#39;ancien coup supprimer dans la liste des anciens coups\n"],["getMatrice","Donnees","Donnees.html#method-i-getMatrice","(file)","<p>Méthode qui permet de générer une matrice avec un fichier donné\n<p>Attribut\n<p><code>file</code> - Un fichier\n"],["ileFini?","Case","Case.html#method-i-ileFini-3F","(unSens)","<p>Methode qui permet de savoir si une ile est terminé, c&#39;est-à-dire si l&#39;île a atteint toutes ses …\n"],["initialiserJeu","Genie","Genie.html#method-i-initialiserJeu","()","<p>Méthode qui permet d&#39;initialiser le jeu (le plateau de jeu et sa correction)\n"],["jouerCoup","Genie","Genie.html#method-i-jouerCoup","(unX, unY, unClic)","<p>Méthode qui permet de jouer un coup\n<p>Attributs\n<p><code>unX</code> - coordonnée X de la case\n"],["jouerCoupHorizontaleInterface","Genie","Genie.html#method-i-jouerCoupHorizontaleInterface","(unX, unY, unClic)","<p>Méthode qui permet de jouer un coup horizontale sur une interface\n<p>Attributs\n<p><code>unX</code> - la coordonnée x de la …\n"],["jouerCoupInterface","Genie","Genie.html#method-i-jouerCoupInterface","(unX, unY, unClic)","<p>Méthode qui permet de jouer un coup sur une interface\n<p>Attributs\n<p><code>unX</code> - la coordonnée x de la case\n"],["jouerCoupVerticaleInterface","Genie","Genie.html#method-i-jouerCoupVerticaleInterface","(unX, unY, unClic)","<p>Méthode qui permet de jouer un coup verticale sur une interface\n<p>Attributs\n<p><code>unX</code> - la coordonnée x de la case …\n"],["jouer_afficher_pont","RubyApp","RubyApp.html#method-i-jouer_afficher_pont","(sens, x, y, click)",""],["lancerChrono","Chrono","Chrono.html#method-i-lancerChrono","()","<p>Lance le chronomètre, et compte le nombre de secondes depuis ce lancement.\n"],["lancerChrono","ContreLaMontre","ContreLaMontre.html#method-i-lancerChrono","(unLabel)","<p>permet de lancer le chronometre dans le sens inverse (part de 300 et se décrémente jusqu&#39;à ce que …\n"],["lancerChrono","Genie","Genie.html#method-i-lancerChrono","(unLabel)","<p>Méthode qui permet de lancer le chronometre dans le sens normal (part de 0 et s&#39;incrémente jusqu&#39;à …\n"],["lancerChrono","Normal","Normal.html#method-i-lancerChrono","(unLabel)","<p>Méthode qui permet de lancer le chronometre dans le sens normal (part de 0 et s&#39;incrémente jusqu&#39;à …\n"],["lancerChronoInverse","Chrono","Chrono.html#method-i-lancerChronoInverse","(unTemps)","<p>Décompte à partir d&#39;un temps donné et s&#39;arrete à 0\n<p>Attributs\n<p><code>unTemps</code> - temps à décompter\n"],["lancerChronoValeur","Chrono","Chrono.html#method-i-lancerChronoValeur","(uneValeur)","<p>Lance le chronomètre, et compte le nombre de secondes depuis ce lancement.\n"],["new","Case","Case.html#method-c-new","(unX, unY, unPlateau, unElem)","<p>Methode d&#39;initialisation de la classe\n<p>Attributs\n<p><code>unX</code> - coordonées x de la case\n"],["new","Catalogue","Catalogue.html#method-c-new","(fenetre, ratio)","<p>Methode d&#39;initialisation de la classe\n<p>Attributs\n<p><code>fenetre</code> - \n"],["new","Chrono","Chrono.html#method-c-new","(unChrono)","<p>Initialise le chronomètre à vide grâce à la méthode de remise à zéro.\n"],["new","ContreLaMontre","ContreLaMontre.html#method-c-new","(unPlateau, unNiveau, unPseudo, uneDifficulte)","<p>initialise un objet\n<p>Attributs\n<p><code>unPlateau</code> : une référence vers le plateau de jeu de la partie courante\n"],["new","Coup","Coup.html#method-c-new","(typeCoup, pont, sens)","<p>Méthode qui permet de initialiser un coup\n<p>Attributs\n<p><code>typeCoup</code> : le type de coup réaliser par le joueur (clic …\n"],["new","Donnees","Donnees.html#method-c-new","()","<p>Méthode d&#39;initialisation d&#39;un donnée\n<p>Par défaut :\n<p>@matrix = Array.new()\n"],["new","Fenetre","Fenetre.html#method-c-new","()","<p>Methode d&#39;initialisation de la classe\n"],["new","Genie","Genie.html#method-c-new","(unPlateau, unNiveau, unPseudo, uneDifficulte)","<p>Méthode qui permet d&#39;initialiser un mode génie\n<p>Attributs\n<p><code>unPlateau</code> : une référence vers le plateau …\n"],["new","Ile","Ile.html#method-c-new","(uneValeur)","<p>Méthode qui permet d&#39;initialiser une ile\n<p>Par defaut :\n<p>nbLiens = 0\n"],["new","Jeu","Jeu.html#method-c-new","(fenetre, ratio, mode, difficulte, map, niveau)","<p>Methode d&#39;initialisation de la classe\n<p>Attributs\n<p><code>fenetre</code> - \n"],["new","JeuTutoriel","JeuTutoriel.html#method-c-new","(fenetre, ratio, mode, difficulte, map, niveau)","<p>Methode d&#39;initialisation de la classe\n<p>Attributs\n<p><code>fenetre</code> - \n"],["new","MenuPrincipal","MenuPrincipal.html#method-c-new","(fenetre, ratio)","<p>Méthode d&#39;initialisation de la classe\n<p>Attributs\n<p><code>fenetre</code> - la fenêtre du jeu\n"],["new","Options","Options.html#method-c-new","(fenetre)","<p>Méthode d&#39;initialisation de la classe\n<p>Attributs\n<p><code>fenetre</code> - la fenêtre du jeu\n"],["new","Plateau","Plateau.html#method-c-new","()","<p>Méthode qui permet d&#39;initialiser un plateau\n<p>Par defaut :\n<p>@x = 0\n"],["new","Pont","Pont.html#method-c-new","(unSens, uneValeur)","<p>Méthode qui permet d&#39;initialiser un pont\n<p>Par defaut :\n<p>@sensHorizontal = false\n"],["new","RubyApp","RubyApp.html#method-c-new","(fenetre, map, sens_popover, fini_dialog)",""],["new","SelectionDifficulte","SelectionDifficulte.html#method-c-new","(fenetre, ratio, mode)",""],["new","SelectionMap","SelectionMap.html#method-c-new","(fenetre, ratio, mode, difficulte)",""],["new","SelectionMode","SelectionMode.html#method-c-new","(fenetre, ratio)",""],["nombreErreurs","ContreLaMontre","ContreLaMontre.html#method-i-nombreErreurs","()","<p>Renvoie le nombre d&#39;erreur du joueur\n"],["on_afficher_erreur_button_clicked","Jeu","Jeu.html#method-i-on_afficher_erreur_button_clicked","()","<p>Méthode activée lorque le bouton “Afficher erreur(s)” est cliquée Affiche toutes les erreurs …\n"],["on_annuler_button_clicked","Jeu","Jeu.html#method-i-on_annuler_button_clicked","()","<p>Méthode activée lorque le bouton “Annuler” est cliquée Annule le coup effectué\n"],["on_autocorrecteur_switch_state_set","Jeu","Jeu.html#method-i-on_autocorrecteur_switch_state_set","(switch, state)","<p>Méthode activée lorque le bouton “Mode autocorrecteur” est activé Corrige directement une erreur …\n"],["on_catalogue_clicked","MenuPrincipal","MenuPrincipal.html#method-i-on_catalogue_clicked","()","<p>Action qui s&#39;exécute lorsque l&#39;on clique sur le bouton catalogue, ferme la box des menus et affiche …\n"],["on_classement_clicked","MenuPrincipal","MenuPrincipal.html#method-i-on_classement_clicked","()","<p>Action qui s&#39;exécute lorsque l&#39;on clique sur le bouton classement, ferme la box des menus et …\n"],["on_contre_la_montre_clicked","SelectionMode","SelectionMode.html#method-i-on_contre_la_montre_clicked","()",""],["on_corriger_erreur_button_clicked","Jeu","Jeu.html#method-i-on_corriger_erreur_button_clicked","()","<p>Méthode activée lorque le bouton “Corriger erreur(s)” est cliquée Corrige toutes les erreurs …\n"],["on_difficile_clicked","SelectionDifficulte","SelectionDifficulte.html#method-i-on_difficile_clicked","()",""],["on_enregistre_button_clicked","Options","Options.html#method-i-on_enregistre_button_clicked","()","<p>Action qui s&#39;exécute lorsque l&#39;on sauvegarde les options actuelles, ouvre le fichier d&#39;options, …\n"],["on_facile_clicked","SelectionDifficulte","SelectionDifficulte.html#method-i-on_facile_clicked","()",""],["on_fini_dialog_response","Jeu","Jeu.html#method-i-on_fini_dialog_response","(widget, response)","<p>Méthode activée lorque le bouton pour fermer le popup “Fini” est cliquée Ferme le popup\n"],["on_fini_dialog_response","JeuTutoriel","JeuTutoriel.html#method-i-on_fini_dialog_response","(widget, response)","<p>Méthode activée lorque le bouton pour fermer le popup “Fini” est cliquée Ferme le popup\n"],["on_génie_clicked","SelectionMode","SelectionMode.html#method-i-on_g-C3-A9nie_clicked","()",""],["on_horizontal_button_clicked","Jeu","Jeu.html#method-i-on_horizontal_button_clicked","()","<p>Méthode activée lorque le bouton “Horizontal” est cliquée lors d&#39;un coup Met un pont en …\n"],["on_hypothese_switch_state_set","Jeu","Jeu.html#method-i-on_hypothese_switch_state_set","(switch, state)","<p>Méthode activée lorque le bouton “Mode hypothèse” est activé Surligne en bleu les coups du …\n"],["on_jouer_button_clicked","SelectionMap","SelectionMap.html#method-i-on_jouer_button_clicked","()",""],["on_jouer_clicked","MenuPrincipal","MenuPrincipal.html#method-i-on_jouer_clicked","()","<p>Action qui s&#39;exécute lorsque l&#39;on clique sur le bouton jouer, ferme la box des menus et affiche …\n"],["on_langue_comboboxtext_changed","Options","Options.html#method-i-on_langue_comboboxtext_changed","(langue)","<p>Action qui s&#39;exécute lorsque l&#39;on change la langue, change la langue dans les options en fonction …\n"],["on_menu_principal_button_clicked","Jeu","Jeu.html#method-i-on_menu_principal_button_clicked","()","<p>Méthode activée lorque le bouton “Menu principal” est cliquée Retourne à la fenêtre du menu …\n"],["on_menu_principal_button_clicked","JeuTutoriel","JeuTutoriel.html#method-i-on_menu_principal_button_clicked","()","<p>Méthode activée lorque le bouton “Menu principal” est cliquée Retourne à la fenêtre du menu …\n"],["on_moyen_clicked","SelectionDifficulte","SelectionDifficulte.html#method-i-on_moyen_clicked","()",""],["on_nb_erreur_button_clicked","Jeu","Jeu.html#method-i-on_nb_erreur_button_clicked","()","<p>Méthode activée lorque le bouton “Nombre d&#39;erreur(s)” est cliquée Affiche le nombre d&#39;erreur …\n"],["on_nom_utilisateur_entry_changed","Options","Options.html#method-i-on_nom_utilisateur_entry_changed","(username)","<p>Action qui s&#39;exécute lorsque l&#39;on change le nom d&#39;utilisateur, change le nom d&#39;utilisateur …\n"],["on_normal_clicked","SelectionMode","SelectionMode.html#method-i-on_normal_clicked","()",""],["on_options_clicked","MenuPrincipal","MenuPrincipal.html#method-i-on_options_clicked","()","<p>Action qui s&#39;exécute lorsque l&#39;on clique sur le bouton option, ferme la box des menus et affiche …\n"],["on_pause_button_clicked","Jeu","Jeu.html#method-i-on_pause_button_clicked","()","<p>Méthode activée lorque le bouton “Pause” est cliquée\n"],["on_quitter_clicked","MenuPrincipal","MenuPrincipal.html#method-i-on_quitter_clicked","()","<p>Action qui s&#39;exécute lorsque l&#39;on clique sur le bouton quitter, ferme l&#39;application\n"],["on_recommencer_button_clicked","Jeu","Jeu.html#method-i-on_recommencer_button_clicked","()","<p>Méthode activée lorque le bouton “Recommencer” est cliquée Relance la même map vide\n"],["on_recommencer_button_clicked","SelectionMap","SelectionMap.html#method-i-on_recommencer_button_clicked","()",""],["on_refaire_button_clicked","Jeu","Jeu.html#method-i-on_refaire_button_clicked","()","<p>Méthode activée lorque le bouton “Refaire” est cliquée Refait le coup qu&#39;on a annulé précédemment …\n"],["on_resolution_comboboxtext_changed","Options","Options.html#method-i-on_resolution_comboboxtext_changed","(resolution)","<p>Action qui s&#39;exécute lorsque l&#39;on change la résolution, change la résolution dans les options …\n"],["on_retour_button_clicked","Catalogue","Catalogue.html#method-i-on_retour_button_clicked","()","<p>Action qui s&#39;exécute lorsque l&#39;on clique sur le bouton retour, ferme la box des options et affiche …\n"],["on_retour_button_clicked","Jeu","Jeu.html#method-i-on_retour_button_clicked","()","<p>Méthode activée lorque le bouton “Retour” est cliquée Sauvegarde la partie et retourne à la …\n"],["on_retour_button_clicked","JeuTutoriel","JeuTutoriel.html#method-i-on_retour_button_clicked","()","<p>Méthode activée lorque le bouton “Retour” est cliquée Sauvegarde la partie et retourne à la …\n"],["on_retour_button_clicked","Options","Options.html#method-i-on_retour_button_clicked","()","<p>Action qui s&#39;exécute lorsque l&#39;on clique sur le bouton retour, ferme la box des options et affiche …\n"],["on_retour_button_clicked","SelectionDifficulte","SelectionDifficulte.html#method-i-on_retour_button_clicked","()",""],["on_retour_button_clicked","SelectionMap","SelectionMap.html#method-i-on_retour_button_clicked","()",""],["on_retour_button_clicked","SelectionMode","SelectionMode.html#method-i-on_retour_button_clicked","()",""],["on_selection_button_clicked","Jeu","Jeu.html#method-i-on_selection_button_clicked","()","<p>Méthode activée lorque le bouton “Selection map” est cliquée Retourne à la fenêtre de la sélection …\n"],["on_selection_button_clicked","JeuTutoriel","JeuTutoriel.html#method-i-on_selection_button_clicked","()","<p>Méthode activée lorque le bouton “Selection map” est cliquée Retourne à la fenêtre de la sélection …\n"],["on_suggerer_un_coup_button_clicked","Jeu","Jeu.html#method-i-on_suggerer_un_coup_button_clicked","()","<p>Méthode activée lorque le bouton “Suggerer un coup” est cliquée Suggère un coup à l&#39;utilisateur …\n"],["on_suivant_button_clicked","JeuTutoriel","JeuTutoriel.html#method-i-on_suivant_button_clicked","()","<p>Méthode activée lorque le bouton “Suivant” est cliquée Lance la map suivante\n"],["on_tutoriel_clicked","SelectionMode","SelectionMode.html#method-i-on_tutoriel_clicked","()",""],["on_vertical_button_clicked","Jeu","Jeu.html#method-i-on_vertical_button_clicked","()","<p>Méthode activée lorque le bouton “Vertical” est cliquée lors d&#39;un coup Met un pont en vertical …\n"],["partieFini?","Plateau","Plateau.html#method-i-partieFini-3F","()","<p>Méthode qui permet de savoir si une partie est finie.\n<p>Retourne\n<p>true si la partie est fini, false sinon …\n"],["pontAjoutable","Case","Case.html#method-i-pontAjoutable","(unSens, unBool)","<p>Methode qui permet de dire si oui ou non le pont peut être ajouté.\n<p>Attributs\n<p><code>unSens</code> - le sens dans lequel …\n"],["pontAjoutables","Case","Case.html#method-i-pontAjoutables","()","<p>Methode qui permet de connaître quels ponts sont ajoutables.\n<p>Retourne\n<p>Un nombre binaire a 4 bits, si un …\n"],["put_img","RubyApp","RubyApp.html#method-i-put_img","(coups)",""],["refaire","Genie","Genie.html#method-i-refaire","()","<p>Méthode qui permet de remettre le dernier coup supprimer\n"],["refaire","RubyApp","RubyApp.html#method-i-refaire","()",""],["sauvegarder","Genie","Genie.html#method-i-sauvegarder","(mode)","<p>Méthode qui permet de sauvegarder une partie, elle sérialize l&#39;objet courant\n"],["set_sens","RubyApp","RubyApp.html#method-i-set_sens","(sens)",""],["stopperChrono","Chrono","Chrono.html#method-i-stopperChrono","()","<p>Stoppe le chronomètre.\n"],["suggestion","ContreLaMontre","ContreLaMontre.html#method-i-suggestion","()","<p>Permet de suggérer un coup à l&#39;utilisateur, si le joueur a des erreurs, alors elles lui sont indiqué …\n"],["to_s","Case","Case.html#method-i-to_s","()","<p>Methode qui d&#39;afficher une case (ses coordonnées) en retournant un string.\n<p>Retourne\n<p>Les coordonnées …\n"],["to_s","Coup","Coup.html#method-i-to_s","()","<p>Méthode qui affiche le sens du coup\n"],["to_s","Donnees","Donnees.html#method-i-to_s","()","<p>Méthode qui affiche la matrice générée\n"],["to_s","Element","Element.html#method-i-to_s","()","<p>Méthode qui affiche un élément\n"],["to_s","Genie","Genie.html#method-i-to_s","()","<p>Méthode qui permet d&#39;afficher le mode génie\n<p>Retourne\n<p>L&#39;état de la partie en cours\n"],["to_s","Ile","Ile.html#method-i-to_s","()","<p>Méthode qui affiche une ile\n"],["to_s","Options","Options.html#method-i-to_s","()","<p>Affiche le nom, la résolution et la langue\n"],["to_s","Plateau","Plateau.html#method-i-to_s","()","<p>Méthode qui permet de retourner la matrice de jeu en string.\n<p>Retourne\n<p>un string\n"],["to_s","Pont","Pont.html#method-i-to_s","()","<p>Affiche le sens du pont (true si horizontal, false sinon) et le nombre de pont\n"],["verifCoord","Genie","Genie.html#method-i-verifCoord","(unX, unY)","<p>Méthode qui permet de verifier les coordonnées d&#39;une case\n<p>ATTRIBUTS\n<p><code>unX</code> - coordonnée X de la case\n"],["verifCoord","Plateau","Plateau.html#method-i-verifCoord","(unX, unY)","<p>Méthode qui permet de verifier les coordonnées passées en paramètre si elles ne débordent pas par rapport …\n"],["voisineBas","Case","Case.html#method-i-voisineBas","()","<p>Methode qui retourne la case du bas\n<p>Exemples\n<p>Pour une case se trouvant à la ligne 2 et à la colonne 3 de …\n"],["voisineDroite","Case","Case.html#method-i-voisineDroite","()","<p>Methode qui retourne la case de droite\n<p>Exemples\n<p>Pour une case se trouvant à la ligne 2 et à la colonne …\n"],["voisineGauche","Case","Case.html#method-i-voisineGauche","()","<p>Methode qui retourne la case de gauche\n<p>Exemples\n<p>Pour une case se trouvant à la ligne 2 et à la colonne …\n"],["voisineHaut","Case","Case.html#method-i-voisineHaut","()","<p>Methode qui retourne la case du haut\n<p>Exemples\n<p>Pour une case se trouvant à la ligne 2 et à la colonne 3 …\n"]]}}